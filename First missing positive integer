//Given an unsorted integer array, find the first missing positive integer
//The whole point is to swap each positive number to its corresponding index, in this way the problem can be solved in O(n) complexity

public class FirstMissing {
    public int firstMissing(int[] A) {

        for(int i = 0; i<A.length;){
            if(A[i] == i+1){
                i++;
            }else{
                if(A[i]>A.length || A[i]<=0){
                    i++;
                }else if(A[i]==A[A[i]-1]){
                    i++;
                }else{
                    int temp = A[A[i]-1];
                    A[A[i]-1] = A[i];
                    A[i] = temp;
                	
                    //This swap is very bad, A[i]'s value has been changed while assigning temp to A[A[i]-1];
                	/*int temp = A[i];
                	A[i] = A[A[i]-1];
                	A[A[i]-1] = temp;*/
                	//System.out.println(A[i]);
                }
            }

        }
        
        for(int i = 0; i<A.length;i++){
            if(A[i]!=i+1) return i+1;
        }
        
        return A.length+1;
    }
}
